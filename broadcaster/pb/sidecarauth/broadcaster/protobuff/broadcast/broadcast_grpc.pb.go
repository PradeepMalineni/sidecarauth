// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: broadcast/broadcast.proto

package broadcast

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	oauth_token "sidecarauth/broadcaster/protobuff/oauth_token"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BroadcastService_BroadcastToken_FullMethodName = "/broadcast.BroadcastService/BroadcastToken"
)

// BroadcastServiceClient is the client API for BroadcastService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BroadcastServiceClient interface {
	BroadcastToken(ctx context.Context, in *oauth_token.OAuthTokenResponse, opts ...grpc.CallOption) (BroadcastService_BroadcastTokenClient, error)
}

type broadcastServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBroadcastServiceClient(cc grpc.ClientConnInterface) BroadcastServiceClient {
	return &broadcastServiceClient{cc}
}

func (c *broadcastServiceClient) BroadcastToken(ctx context.Context, in *oauth_token.OAuthTokenResponse, opts ...grpc.CallOption) (BroadcastService_BroadcastTokenClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BroadcastService_ServiceDesc.Streams[0], BroadcastService_BroadcastToken_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &broadcastServiceBroadcastTokenClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BroadcastService_BroadcastTokenClient interface {
	Recv() (*BroadcastResponse, error)
	grpc.ClientStream
}

type broadcastServiceBroadcastTokenClient struct {
	grpc.ClientStream
}

func (x *broadcastServiceBroadcastTokenClient) Recv() (*BroadcastResponse, error) {
	m := new(BroadcastResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BroadcastServiceServer is the server API for BroadcastService service.
// All implementations must embed UnimplementedBroadcastServiceServer
// for forward compatibility
type BroadcastServiceServer interface {
	BroadcastToken(*oauth_token.OAuthTokenResponse, BroadcastService_BroadcastTokenServer) error
	mustEmbedUnimplementedBroadcastServiceServer()
}

// UnimplementedBroadcastServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBroadcastServiceServer struct {
}

func (UnimplementedBroadcastServiceServer) BroadcastToken(*oauth_token.OAuthTokenResponse, BroadcastService_BroadcastTokenServer) error {
	return status.Errorf(codes.Unimplemented, "method BroadcastToken not implemented")
}
func (UnimplementedBroadcastServiceServer) mustEmbedUnimplementedBroadcastServiceServer() {}

// UnsafeBroadcastServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BroadcastServiceServer will
// result in compilation errors.
type UnsafeBroadcastServiceServer interface {
	mustEmbedUnimplementedBroadcastServiceServer()
}

func RegisterBroadcastServiceServer(s grpc.ServiceRegistrar, srv BroadcastServiceServer) {
	s.RegisterService(&BroadcastService_ServiceDesc, srv)
}

func _BroadcastService_BroadcastToken_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(oauth_token.OAuthTokenResponse)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BroadcastServiceServer).BroadcastToken(m, &broadcastServiceBroadcastTokenServer{ServerStream: stream})
}

type BroadcastService_BroadcastTokenServer interface {
	Send(*BroadcastResponse) error
	grpc.ServerStream
}

type broadcastServiceBroadcastTokenServer struct {
	grpc.ServerStream
}

func (x *broadcastServiceBroadcastTokenServer) Send(m *BroadcastResponse) error {
	return x.ServerStream.SendMsg(m)
}

// BroadcastService_ServiceDesc is the grpc.ServiceDesc for BroadcastService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BroadcastService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broadcast.BroadcastService",
	HandlerType: (*BroadcastServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BroadcastToken",
			Handler:       _BroadcastService_BroadcastToken_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "broadcast/broadcast.proto",
}
